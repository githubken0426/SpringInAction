<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
           
     <context:component-scan base-package="spring/chapter_04SpringAOP"></context:component-scan>
     
     <!-- 切面类 -->
     <bean id="audience" class="spring.chapter_04SpringAOP.aspect.Audience" scope="singleton"/>
     <bean id="arroundAspect" class="spring.chapter_04SpringAOP.aspect.ArroundAspect"/>
     <bean id="mindRader" class="spring.chapter_04SpringAOP.aspect.Mindreader"/>
     <!-- aop：execution(*  ) *号代表不关心方法返回值类型。
     	&&:and,||:or,not:!
     	within(chapter_04SpringAOP.bean)限制匹配:当chapter_04SpringAOP.bean下的方法被调用时。-->
     <aop:config>
     	<!-- 4.2.1 pointcut:切入点定义在切面外部，可以被多个切面引用 。
     				多个切面引用同一个pointcut，每个切面都会被同时执行(每个切面执行的是所有切面的组合)
     				如：audience切面会执行audience、arroundAspect，
     				而arroundAspect也会执行audience、arroundAspect。
     				除非声明不同的切入点。如切面：mindRader-->
     	<aop:pointcut  id="point" expression="execution(* spring.chapter_04SpringAOP.service..*.*(..))"/>
     	<!-- 4.3.1 声明前置和后置通知 aspect：定义一个切面 -->
     	<aop:aspect ref="audience">
     		<aop:before method="takeSeats" pointcut-ref="point"/>
     		<aop:before method="turnOffCellPhone" pointcut-ref="point"/>
     		<aop:after-returning method="applaud" pointcut-ref="point"/>
     		<aop:after-throwing method="demandRefund" pointcut-ref="point"/>
     	</aop:aspect>
     	<!-- 4.3.2 声明环绕通知 -->
     	<aop:aspect ref="arroundAspect">
     		<aop:around method="watchAround" pointcut-ref="point"/>
     	</aop:aspect>
     	<!-- 4.3.3 arg-names属性将被通知方法的参数传递给通知 -->
     	<aop:aspect ref="mindRader">
     		<aop:pointcut id="thinking" expression="execution(* 
     			spring.chapter_04SpringAOP.service.Thinker.thinkOfSomething(String)) and args(thoughts)"/>
     		<aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names="thoughts"/>
     	</aop:aspect>
     	<!-- 4.3.4  借助引入(introduction)，为现有的对象添加新的功能.
     		此处为现有对象Performer接口添加一个Constant接口，具体的实现则有default-impl指定。
     	-->
     	<aop:aspect>
     		<!-- 注意:“+”号，忘记则：java.lang.ClassCastException: $Proxy14 cannot be cast to xxx -->
     		<aop:declare-parents types-matching="spring.chapter_04SpringAOP.service.Performer+" 
     		implement-interface="spring.chapter_04SpringAOP.service.Constant"
     		default-impl="spring.chapter_04SpringAOP.service.impl.ConstantImpl"/>
     	</aop:aspect>
     		<!-- 具体实现有default-impl或者用委托代理delegate-ref=""指定，二者选一 。 -->
     </aop:config>
</beans>