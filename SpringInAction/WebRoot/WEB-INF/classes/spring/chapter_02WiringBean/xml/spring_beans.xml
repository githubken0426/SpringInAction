<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd"
           default-init-method="turnOnLights" default-destroy-method="turnOffLights">
        <!-- 如果上下文很多bean都拥有相同名字的初始化方法和销毁方法，可以使用beans元素的 default-init-method和default-destroy-method-->
        
        <!--2.1.4 scope作用域: 1.singleton单例模式(默认) 
        			   2.prototype多例(每次请求都产生一个实例) 
        			   3.request 在一次HTTP请求中，每个bean定义对应一个实例(该作用域仅在基于web的spring上下文有效。如springmvc)
        			   4.session 在一次HTTP Session中，每个bean定义对应一个实例(该作用域仅在基于web的spring上下文有效。如springmvc)
        			   5.global-session 在一个全局HTTP Session中，每个bean定义对应一个实例(该作用域仅在Portlet上下文有效。)
        			   -->
        <bean id="juggler" class="spring.chapter_02WiringBean.service.impl.Juggler" scope="singleton">
        	<constructor-arg value="15"></constructor-arg>
        	<constructor-arg ref="poem">
        		<!-- 内部bean也可以通过构造器注入 
        		<bean class="spring.chapter_02WiringBean.service.impl.Sonnet29"></bean>-->
        	</constructor-arg>
        </bean>
     	<bean id="poem" class="spring.chapter_02WiringBean.service.impl.Sonnet29"/>
     	
     	<!--2.1.3 factory-method属性允许指定一个静态方法，来创建一个类的实例 -->
     	<bean id="singleton" class="spring.chapter_02WiringBean.factory.Singleton" 
     		factory-method="getInstance"></bean>
     	
     	<!--2.1.5 init-method:指定了初始化bean需要调用的方法。  destroy-method：指定了bean从容器移除之前调用的方法-->	
     	<bean id="auditorium" class="spring.chapter_02WiringBean.bean.Auditorium" 
     		init-method="turnOnLights" destroy-method="turnOffLights"/>	
     	
     	<!--2.2 注入bean属性。注意:重复注入bean将会发生异常，比如ref注入后再用内部bean注入-->
     	<bean id="kenny" class="spring.chapter_02WiringBean.bean.InstrumentList">
     		<!--2.2.1 注入简单值 -->
     		<property name="song" value="Seawind"></property>
     		<!--2.2.2 引用其他bean -->
     		<property name="instrument"><!--ref="instrument" -->
     			<!-- 注入内部bean -->
     			<bean class="spring.chapter_02WiringBean.service.impl.Saxophone"></bean>
     		</property>
     	</bean>
     	<bean id="instrument" class="spring.chapter_02WiringBean.service.impl.Saxophone"></bean>
     	
      	<!-- 2.2.3 使用spring的命名空间p装备属性 
      		  	      命名空间p的schema设置为:xmlns:p="http://www.springframework.org/schema/p"
      	-->
      	<bean id="kennyP" class="spring.chapter_02WiringBean.bean.InstrumentList"
      		p:song="Seawind" p:instrument-ref="instrument"/>
      	<!-- 2.2.4 装配集合 -->
      	<bean id="instrument2" class="spring.chapter_02WiringBean.service.impl.Samphone"></bean>
      	<bean id="oneManBand" class="spring.chapter_02WiringBean.service.impl.OneManBand">
      		<property name="instruments">
      			<set><!-- set无序不重复，list有序重复 -->
      				<ref bean="instrument2"/>
      				<ref bean="instrument2"/>
      				<ref bean="instrument"/>
      				<ref bean="instrument"/>
      			</set>
      		</property>
      		<!-- 装配Map -->
      		<property name="map">
      			<map>
      				<entry key="One:" value-ref="instrument"></entry>
      				<entry key="Second:" value-ref="instrument2"></entry>
      			</map>
      		</property>
      		<!-- 装配Properties集合(当Map的key和value都为String类型，可以使用java.util.Properties代替) -->
      		<property name="prototype">
      			<props>
      				<prop key="Properties-Guitar:">guitar-value</prop>
      				<prop key="Properties-Cymbal">cymbal-value</prop>
      			</props>
      		</property>
      		
      		<property name="mapStr">
      			<props>
      				<prop key="Map-Guitar:">guitar-value</prop>
      				<prop key="Map-Cymbal">cymbal-value</prop>
      			</props>
      		</property>
      		<!-- 2.2.5 装配Null值 -->
      		<property name="name"><null/></property>
      		<!-- 2.3.1 SpEL -->
      		<!-- String类型属性，要用''引起来，否则异常:EL1008E:(pos 0): 
      			Property or field 'test' cannot be found on object of type 
      			'org.springframework.beans.factory.config.BeanExpressionContext' - maybe not public? -->
      		<property name="SpEL" value="#{'test'}"></property>
      	</bean>
</beans>